from random import randint, choice
from tarantool_utils import *
from config import *
import datetime


async def def_phrases(bot, event):
	if event.type.value == 'newMessage':
		user = User(user_id=event.from_chat).get()
		if user.old_mes['schedule']:
			await write_schedule(bot, event)
		elif user.old_mes['homework']:
			await write_homework(bot, event)
		elif user.old_mes['del_schedule']:
			await del_schedule(bot, event)
		else:
			if event.data['chat']['type'] == 'private':
				await start(bot, event)


async def v_stop(bot, event):
	user = User(user_id=event.from_chat).get()
	if user.old_mes['schedule'] or user.old_mes['homework'] or user.old_mes['text'] \
	or user.old_mes['del_schedule']:
		user.old_mes.update({'schedule': None, 'homework': None, 'text': None, 'del_schedule': None})
		user.save()
		await bot.send_text(
			chat_id=event.from_chat,
			text="–ß—Ç–æ—à. –î–∞–≤–∞–π –ø—Ä–æ—Å—Ç–æ –ø–æ–±–æ–ª—Ç–∞–µ–º."
			)
	else:
		await def_phrases(bot, event)

async def del_schedule(bot, event):
	user = User(user_id=event.from_chat).get()
	if user.old_mes['del_schedule'] is None:
		user.old_mes['del_schedule'] = event.data['text'].lower()
	else:
		user.old_mes['del_schedule'] += " " + event.data['text'].lower()
	args = user.old_mes['del_schedule'].split()
	index_duplicate = is_duplicate(args, weekday)
	if index_duplicate:
		# –∏—â–µ–º –≤—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –∏ —É–¥–∞–ª—è–µ–º –∏—Ö –∏–∑ –±–¥ –µ—Å–ª–∏ –µ—Å—Ç—å
		for index, c in enumerate(args):
			p = morph.parse(c)[0].normal_form
			p = cut_weekday[p] if cut_weekday.get(p) else p
			if p in weekday:
				if user.schedule.get(p):
					user.schedule.pop(p)
		await bot.send_text(
			chat_id=event.from_chat,
			text="–ì–æ—Ç–æ–≤–æ, —É–¥–∞–ª–∏–ª."
		)	
		user.old_mes['del_schedule'] = None
	else:
		await bot.send_text(
			chat_id=event.from_chat,
			text="–£–∫–∞–∂–∏ –¥–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é."
		)		
	user.save()


async def write_schedule(bot, event):
	chat_id = event.from_chat
	user = User(user_id=chat_id).get()
	# –ó–∞–ø–∏—Å–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —é–∑–µ—Ä–∞
	if user.old_mes['schedule'] is None:
		user.old_mes['schedule'] = event.data['text'].lower()
	else:
		user.old_mes['schedule'] += " " + event.data['text'].lower()
	# –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–Ω—ë–º –Ω–µ–¥–µ–ª–∏
	args = user.old_mes['schedule'].split()
	index_duplicate = is_duplicate(args, weekday)
	if index_duplicate:
		# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∑–∞–ø–∏—Å–∞–Ω—ã –ø–æ—Å–ª–µ —Å–ª–æ–≤ —Å –¥–Ω—ë–º –Ω–µ–¥–µ–ª–∏
		schedule = ' '.join(args[index_duplicate + 1:]).split(',')
		if len(schedule) >= 1 and len(args[index_duplicate + 1:]) >= 1:
			# –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –ª–∏—Å—Ç–µ –∏ —Å—Ç–∞–≤–∏–º —Å–ª–æ–≤–∞ –≤ –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
			schedule_text = [str(index + 1) + ' –£—Ä–æ–∫: ' + c.strip() for index, c in enumerate(schedule)]
			schedule = [morph.parse(c.strip())[0].normal_form for c in schedule]
			if cut_weekday.get(args[index_duplicate]):
				schedule_weekday = cut_weekday[args[index_duplicate]]
			else:
				schedule_weekday = args[index_duplicate]
			p = morph.parse(schedule_weekday)[0]
			schedule_weekday = p.inflect({'accs'}).word if p.tag.POS == 'NOUN' else schedule_weekday
			await bot.send_text(
				chat_id=chat_id,
				text="–ì–æ—Ç–æ–≤–æ. –¢–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {}:\n{}".format(schedule_weekday,
					'\n'.join(schedule_text))
			)
			# –°—Ç–∞–≤–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –≤ –ò–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂
			p = morph.parse(schedule_weekday)[0].normal_form
			user.schedule[p] = schedule
			user.old_mes['schedule'] = None
		else:
			p = morph.parse(args[index_duplicate])[0]
			schedule_weekday = p.inflect({'accs'}).word if p.tag.POS == 'NOUN' else args[index_duplicate]
			await bot.send_text(
				chat_id=chat_id,
				text="–ö–∞–∫–∏–µ —É—Ä–æ–∫–∏ —É —Ç–µ–±—è –≤ {}? (–Ω–∞–ø–∏—à–∏ –≤—Å–µ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"\
				.format(schedule_weekday)
			)	
	else:
		await bot.send_text(
			chat_id=chat_id,
			text="–ù–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å?"
		)
	user.save()


async def write_homework(bot, event):
	chat_id = event.from_chat
	user = User(user_id=chat_id).get()
	# –ó–∞–ø–∏—Å–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —é–∑–µ—Ä–∞
	if user.old_mes['homework'] is None:
		user.old_mes['homework'] = event.data['text']
	else:
		user.old_mes['homework'] += " " + event.data['text']	

	args = user.old_mes['homework'].lower().split()
	# –∏—â–µ–º —Å–ª–æ–≤–æ –ø–æ, –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ —á—Ç–æ –æ–Ω–æ —Å—Ç–æ–∏—Ç –≤ –∫–æ–Ω—Ü–µ
	index_text = args.index('–ø–æ') + 1 if args.index('–ø–æ') else 0
	if index_text == len(args) - 1:
		await bot.send_text(
			chat_id=chat_id,
			text="–ß—Ç–æ –∑–∞–¥–∞–ª–∏?"
		)	
		user.save()	
	elif index_text <= len(args) - 1:
		await bot.send_text(
			chat_id=chat_id,
			text="–ì–æ—Ç–æ–≤–æ, –∑–∞–ø–∏—Å–∞–ª –î–ó –ø–æ {}:\n- {}".format(args[index_text], ' '.join(user.old_mes['homework'].split()[index_text + 1:]))
		)
		# –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ
		p = morph.parse(args[index_text])[0].normal_form
		# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—ë, —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
		user.homework[p] = ' '.join(user.old_mes['homework'].split()[index_text + 1:])
		user.old_mes['homework'] = None
		user.save()
		user.update_stat(index=5)	
	else:
		await bot.send_text(
			chat_id=chat_id,
			text="–ü–æ –∫–∞–∫–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –∑–∞–ø–∏—Å–∞—Ç—å –î–ó?"
		)
		user.save()
	


async def read_homework(bot, event):
	user = User(user_id=event.from_chat).get()
	# –ü–æ–ª—É—á–µ–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–µ(–∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞–¥–µ–∂) –∏ –ø–æ–ª—É—á–∞–µ–º –ª–∏—Å—Ç,
	# –î–ª—è –ø–æ–∏—Å–∫–∞, –µ—Å–ª–∏ —É–∫–∞–∂—É—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
	args = [morph.parse(c)[0].normal_form for c in event.data['text'].lower().split()]
	index_duplicate = is_duplicate(args, weekday)
	# –ò—â–µ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–æ–∑–º–æ–∂–Ω–æ –æ–Ω –∑–∞–ø–∏—Å–∞–ª –∫–æ–≥–¥–∞-—Ç–æ
	index_homework = get_gomework_object(args, user)
	text = ''
	if index_duplicate:
		# –ò—â–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—Å–∞–ª–∏
		text = get_homework(text, args[index_duplicate], user)
	elif index_homework:
		text = "–î–æ–º–∞—à–∫–∞ –ø–æ {}:\n{}".format(index_homework, user.homework[index_homework])
	else:
		data = datetime.datetime.today().isoweekday()
		i = data
		# –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –¥–æ —Ç–µ—Ö –ø–æ—Ä. –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥—ë–º —Ö–æ—Ç—å –æ–¥–Ω—É –¥–æ–º–∞—à–∫—É, –Ω–∞ –∫–∞–∫–æ–º-—Ç–æ –¥–Ω–µ –Ω–µ–¥–µ–ª–∏
		j = 0 
		while j < 7:
			# –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–ª–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ 
			i = i + 1 if i <= 6 else 1
			text = get_homework(text, rus_date[i], user)
			if text != '':
				break
			j += 1
	if text == '':
		text = '–ù–µ—Ç—É –¥–æ–º–∞—à–∫–∏'	

	await bot.send_text(
			chat_id=event.from_chat,
			text=text
		)	



def get_gomework_object(args, user):
	for arg in args:
		if arg in user.homework.keys():
			return arg	


def get_homework(text, weekday, user):
	weekday = cut_weekday.get(weekday, weekday)
	get = user.schedule.get(weekday)
	if get:
		for c in get:
			if user.homework.get(c):
				text += "–î–æ–º–∞—à–∫–∞ –ø–æ {}:\n{}\n".format(c, user.homework[c])	
	return text 

async def all_homework(bot, event):
	user = User(user_id=event.from_chat).get()
	text = ''
	if len(user.homework) >= 1:
		for c in user.homework:
			text += "–î–æ–º–∞—à–∫–∞ –ø–æ {}:\n{}\n".format(c, user.homework[c])
	else:
		text += "–ù–µ—Ç—É –¥–æ–º–∞—à–∫–∏"

	await bot.send_text(
			chat_id=event.from_chat,
			text=text
		)


def is_duplicate(list1, list2):
	for index, c in enumerate(list1):
		p = morph.parse(c)[0].normal_form
		p = cut_weekday[p] if cut_weekday.get(p) else p
		if p in list2:
			
			return index
	return False


async def start(bot, event):
	await bot.send_text(
			chat_id=event.from_chat,
			text="""üòé –ü—Ä–∏–≤–µ—Ç! 

–Ø –º–æ–≥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ –¥–∑. –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –æ–±—â–∏–π —á–∞—Ç –∫–ª–∞—Å—Å–∞, –∏ –≤—Å–µ —Ç–≤–æ–∏ –æ–¥–Ω–æ–∫–ª–∞—Å—Å–Ω–∏–∫–∏ —Å–º–æ–≥—É—Ç —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å —É –º–µ–Ω—è, —á—Ç–æ –∑–∞–¥–∞–ª–∏ –∏ –∫–∞–∫–∏–µ —É—Ä–æ–∫–∏ –≤ –ø—è—Ç–Ω–∏—Ü—É. 

üìí –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
  
–î–æ–±–∞–≤—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
–£–¥–∞–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
–ó–∞–ø–∏—à–∏ –¥–æ–º–∞—à–∫—É –ø–æ *–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞*
–ß—Ç–æ –º–Ω–µ –∑–∞–¥–∞–ª–∏?
–ü–æ–∫–∞–∂–∏ –¥–æ–º–∞—à–∫—É –Ω–∞ *–¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏*
–ü–æ–∫–∞–∂–∏ –¥–æ–º–∞—à–∫—É –ø–æ *–Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞*
–ü–æ–∫–∞–∂–∏ –≤—Å—é –¥–æ–º–∞—à–∫—É"""
		)

async def media(bot, event):
	await bot.send_text(
			chat_id=event.from_chat,
			text="–ü—Ä–∏—à–ª–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
		)	
